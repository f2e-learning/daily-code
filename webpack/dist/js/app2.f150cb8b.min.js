(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app2"],{

/***/ "./src/app2.js":
/*!*********************!*\
  !*** ./src/app2.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_common_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/common.ts */ \"./src/js/common.ts\");\n/* harmony import */ var _js_common_ts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_common_ts__WEBPACK_IMPORTED_MODULE_0__);\n// import './css/common.scss';\n // import './js/app.ws';\n// import Vue from 'vue'\n// new Vue({\n//     el: '#app',\n//     created: () => {\n//         console.log('app2 created');\n//     }\n// });\n\n//# sourceURL=webpack:///./src/app2.js?");

/***/ }),

/***/ "./src/js/common.ts":
/*!**************************!*\
  !*** ./src/js/common.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @Author: forguo\n * @Date: 2021/10/25 10:11\n * @Description: typescript 学习\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// 1.全局安装 typescript\n// npm install typescript -g\n// yarn global add typescript\n/**\n * @title typescript的静态类型\n */\n// ** 基础静态类型\n// null,undefined,symbol,boolean，void\nvar count = 1;\nvar www = 'www';\nvar weiGuo = {\n    name: 'weiGuo',\n    age: 25,\n    // sex: 'man',\n};\n// ** 对象类型\n// 对象\nvar my = {\n    name: 'weiGuo',\n    age: 25,\n    // sex: 'man',\n};\n// 数组\nvar list = [1, 2, 3];\n// 函数类型\nvar fn = function () { return 'fn1'; };\n/**\n * @title 类型注释和类型推断\n */\n// ** 类型注释\nvar count2 = 123;\n// ** 类型推断\nvar count3 = 123;\n// ===> 工作使用问题（潜规则）\n// 如果 TS 能够自动分析变量类型， 我们就什么也不需要做了\n// 如果 TS 无法分析变量类型的话， 我们就需要使用类型注解\n/**\n * @title 函数参数和返回类型定义\n */\n// ** 简单类型定义\nfunction getTotal(one, two) {\n    return one + two;\n}\ngetTotal(1, 2);\n// ** 无返回值的定义: void\nfunction hello() {\n    console.log('hello');\n}\nhello();\n// ** never返回值类型\n// 抛出异常\nfunction errFun() {\n    throw new Error();\n    console.log('error');\n}\n// 死循环\nfunction whileFun() {\n    while (true) {\n    }\n    console.log('error');\n}\n// ** 函数参数为对象\nfunction add(_a) {\n    var one = _a.one, two = _a.two;\n    return one + two;\n}\nvar total = add({ one: 1, two: 2 });\n/**\n * @title 数组类型的定义\n */\n// ** 基本类型\nvar numArr = [1, 2, 3];\nvar strArr = ['1', '2', '3'];\nvar undefArr = [undefined, undefined, undefined];\nvar multiArr = ['1', 1]; // 多个类型\nvar infoList = [\n    {\n        name: 'forguo',\n        age: 25,\n    }\n];\n// 类进行定义\nvar InfoClass = /** @class */ (function () {\n    function InfoClass() {\n    }\n    return InfoClass;\n}());\nvar infoList2 = [\n    {\n        name: 'forguo',\n        age: 25,\n    }\n];\n/**\n * @title 元组的使用和类型约束\n */\n// ** 基本应用\n// 简单类型注解\nvar xiaojiejie = [0, \"teacher\", 28];\n// 数组中的每个元素类型的位置给固定住了，这就叫做元组\nvar xiaojiejie1 = [\"teacher\", 28];\n// ** 使用\nvar xiaojiejies = [\n    [\"dajiao\", \"teacher\", 28],\n    [\"liuying\", \"teacher\", 18],\n    [\"cuihua\", \"teacher\", 25],\n];\nvar girl = {\n    name: 'xiaohua',\n    age: 18\n};\nvar people1 = 'name';\nvar girl1 = {\n    name: 'nicai',\n    // age: 18,\n    // address: '浙江杭州'\n};\nvar girl3 = {\n    name: 'name',\n    sex: 1,\n    say: function () {\n        return \"欢迎光临 ，红浪漫洗浴！！\";\n    },\n};\n// ** 接口和类的约束\nvar girlC = /** @class */ (function () {\n    function girlC() {\n        this.name = '';\n        this.sex = '';\n    }\n    girlC.prototype.say = function () {\n        return this.name;\n    };\n    return girlC;\n}());\n/* 接口只是在 TypeScript 里帮我们作语法校验的工具，编译成正式的js代码，就不会有任何用处了。 */\n/**\n * @title typescript中类的概念和使用\n */\n/**\n * @title typescript中类的访问类型\n */\n// ** public 默认 允许在类的内部和外部被调用\n// ** private 只允许在类的内部被调用，外部不允许调用\n// ** protected 允许在类内及继承的子类中使用\n/**\n * @title typescript中类的构造函数\n */\nvar Person111 = /** @class */ (function () {\n    function Person111(name) {\n        this.name = name;\n    }\n    return Person111;\n}());\nvar person111 = new Person111('www');\nconsole.log(person111.name);\n// 简写\nvar Person222 = /** @class */ (function () {\n    function Person222(name) {\n        this.name = name;\n    }\n    return Person222;\n}());\nvar person222 = new Person222('http');\nconsole.log(person222.name);\n// 类继承中的构造器写法\nvar PersonA = /** @class */ (function () {\n    function PersonA(name) {\n        this.name = name;\n        // 这里就不用再去 this.name = name;\n    }\n    return PersonA;\n}());\nvar Teacher = /** @class */ (function (_super) {\n    __extends(Teacher, _super);\n    function Teacher(name, age) {\n        var _this = _super.call(this, name) || this;\n        _this.age = age;\n        return _this;\n    }\n    return Teacher;\n}(PersonA));\nconsole.log(new Teacher('罗翔', 18));\n/**\n * @title typescript中类的Getter、Setter和static的使用\n */\nvar XiaoJieJie = /** @class */ (function () {\n    function XiaoJieJie(name, _age) {\n        this._age = _age;\n        this._name = name;\n    }\n    Object.defineProperty(XiaoJieJie.prototype, \"age\", {\n        // ** get\n        get: function () {\n            return this._age;\n        },\n        // ** set\n        set: function (age) {\n            this._age = age;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    XiaoJieJie.prototype.say = function () {\n        return 'I am ' + this._age + 'years old'; // XiaoJieJie.prototype.say = function\n    };\n    // ** 不用 new 出对象就可以使用类里的方法\n    XiaoJieJie.sayLove = function () {\n        return \"I Love you\"; // XiaoJieJie.sayLove = function\n    };\n    return XiaoJieJie;\n}());\nvar www1 = new XiaoJieJie('www', 18);\nwww1.age = 20;\n// www1._name = 'www'; // 不可以修改\nconsole.log(www1.age);\n// XiaoJieJie.sayLove();\n/**\n * @title 抽象类的使用\n */\nvar DaBaoJian = /** @class */ (function () {\n    function DaBaoJian() {\n    }\n    return DaBaoJian;\n}());\nvar PrimaryWaiter = /** @class */ (function (_super) {\n    __extends(PrimaryWaiter, _super);\n    function PrimaryWaiter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PrimaryWaiter.prototype.skill = function () {\n        console.log('初级大保健');\n    };\n    return PrimaryWaiter;\n}(DaBaoJian));\nvar IntermediateWaiter = /** @class */ (function (_super) {\n    __extends(IntermediateWaiter, _super);\n    function IntermediateWaiter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IntermediateWaiter.prototype.skill = function () {\n        console.log('中级大保健');\n    };\n    return IntermediateWaiter;\n}(DaBaoJian));\nvar SeniorWaiter = /** @class */ (function (_super) {\n    __extends(SeniorWaiter, _super);\n    function SeniorWaiter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SeniorWaiter.prototype.skill = function () {\n        console.log('终极大保健');\n    };\n    return SeniorWaiter;\n}(DaBaoJian));\n/**\n * @title tsconfig.json\n */\n// typescript 的编译配置文件\n// tsc init // 初始化tsconfig文件\n// tsc // tsconfig编译\n// ** 编译选项详解\n// https://www.tslang.cn/docs/handbook/compiler-options.html\n/**\n * @title 联合类型和类型守护\n */\n// ** 联合类型 两个以上的参数类型\n// ** 类型守护 对参数类型进行判断\n/**\n * @title 枚举的使用\n */\nvar Status;\n(function (Status) {\n    Status[Status[\"success\"] = 200] = \"success\";\n    Status[Status[\"error\"] = 201] = \"error\";\n    Status[Status[\"auth\"] = 401] = \"auth\";\n})(Status || (Status = {}));\nconsole.log(Status.error);\nconsole.log(Status[200]);\n/**\n * @title 函数泛型\n */\n/**\n * @title 命名空间 NameSpace\n */\nvar Home;\n(function (Home) {\n    var Header = /** @class */ (function () {\n        function Header() {\n            var elem = document.createElement('header');\n            elem.innerText = 'This Is Header';\n            document.body.appendChild(elem);\n        }\n        return Header;\n    }());\n    var Footer = /** @class */ (function () {\n        function Footer() {\n            var elem = document.createElement('footer');\n            elem.innerText = 'This Is Footer';\n            document.body.appendChild(elem);\n        }\n        return Footer;\n    }());\n    // 需要暴露出去的类，可以使用export关键词\n    var Page = /** @class */ (function () {\n        function Page() {\n            new Header();\n            new Footer();\n        }\n        return Page;\n    }());\n    Home.Page = Page;\n    // 只有Home.Page是全局的，其他的都是模块化私有的\n    new Page();\n})(Home || (Home = {}));\n\n\n//# sourceURL=webpack:///./src/js/common.ts?");

/***/ }),

/***/ 1:
/*!******************************************!*\
  !*** multi babel-polyfill ./src/app2.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! babel-polyfill */\"./node_modules/babel-polyfill/lib/index.js\");\nmodule.exports = __webpack_require__(/*! /Users/forguo/work/f2e/daily-code/webpack/src/app2.js */\"./src/app2.js\");\n\n\n//# sourceURL=webpack:///multi_babel-polyfill_./src/app2.js?");

/***/ })

},[[1,"runtime~app2","vendors~app1~app2"]]]);