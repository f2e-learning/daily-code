{"version":3,"sources":["webpack:///./src/app2.js","webpack:///./src/js/common.ts"],"names":["Vue","el","created","console","log"],"mappings":"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","file":"js/app2.cc831f5f.js","sourcesContent":["// import './css/common.scss';\nimport './js/common.ts';\n// import './js/app.ws';\n\nimport Vue from 'vue'\n\nnew Vue({\n    el: '#app2',\n    created: () => {\n        console.log('app2 created');\n    }\n});\n","/**\n * @Author: forguo\n * @Date: 2021/10/25 10:11\n * @Description: typescript 学习\n */\n\n// 1.全局安装 typescript\n// npm install typescript -g\n// yarn global add typescript\n\n/**\n * @title typescript的静态类型\n */\n\n// ** 基础静态类型\n// null,undefined,symbol,boolean，void\nconst count: number = 1;\nlet www: string = 'www';\n\n// ** 自定义静态类型\ninterface People1 {\n    name: string,\n    age: number\n}\n\nconst weiGuo: People1 = {\n    name: 'weiGuo',\n    age: 25,\n    // sex: 'man',\n}\n\n// ** 对象类型\n\n// 对象\nconst my: {\n    name: string,\n    age: number\n} = {\n    name: 'weiGuo',\n    age: 25,\n    // sex: 'man',\n}\n\n// 数组\nconst list: number[] = [1, 2, 3];\n\n// 函数类型\nconst fn: () => string = () => 'fn1';\n\n/**\n * @title 类型注释和类型推断\n */\n\n// ** 类型注释\nlet count2: number = 123;\n\n// ** 类型推断\nlet count3 = 123;\n\n// ===> 工作使用问题（潜规则）\n// 如果 TS 能够自动分析变量类型， 我们就什么也不需要做了\n// 如果 TS 无法分析变量类型的话， 我们就需要使用类型注解\n\n/**\n * @title 函数参数和返回类型定义\n */\n\n// ** 简单类型定义\n\nfunction getTotal(one: number, two: number): number {\n    return one + two;\n}\n\ngetTotal(1, 2);\n\n// ** 无返回值的定义: void\nfunction hello(): void {\n    console.log('hello');\n}\n\nhello();\n\n// ** never返回值类型\n// 抛出异常\nfunction errFun(): never {\n    throw new Error();\n    console.log('error');\n}\n\n// 死循环\nfunction whileFun(): never {\n    while (true) {\n    }\n    console.log('error');\n}\n\n// ** 函数参数为对象\n\nfunction add({one, two}: { one: number, two: number }) {\n    return one + two;\n}\n\nconst total = add({one: 1, two: 2});\n\n/**\n * @title 数组类型的定义\n */\n\n// ** 基本类型\nconst numArr: number[] = [1, 2, 3]\nconst strArr: string[] = ['1', '2', '3']\nconst undefArr: undefined[] = [undefined, undefined, undefined]\nconst multiArr: (number | string) [] = ['1', 1]; // 多个类型\n\n// ** 对象类型的定义\n// 类型别名(type alias)\ntype Info = {\n    name: string,\n    age: number\n};\n\nlet infoList: Info[] = [\n    {\n        name: 'forguo',\n        age: 25,\n    }\n];\n\n// 类进行定义\nclass InfoClass {\n    name: string | undefined;\n    age: number | undefined;\n}\n\nlet infoList2: InfoClass[] = [\n    {\n        name: 'forguo',\n        age: 25,\n    }\n];\n\n/**\n * @title 元组的使用和类型约束\n */\n\n// ** 基本应用\n\n// 简单类型注解\nconst xiaojiejie: (string | number)[] = [0, \"teacher\", 28];\n\n// 数组中的每个元素类型的位置给固定住了，这就叫做元组\nconst xiaojiejie1: [string, number] = [\"teacher\", 28];\n\n// ** 使用\n\nconst xiaojiejies: [string, string, number][] = [\n    [\"dajiao\", \"teacher\", 28],\n    [\"liuying\", \"teacher\", 18],\n    [\"cuihua\", \"teacher\", 25],\n];\n\n/**\n * @title typescript中的interface接口\n * @desc 用来规范类型的\n */\n\n// ** 初步了解\ninterface Girl {\n    name: string;\n    age: number;\n}\n\nconst girl: Girl = {\n    name: 'xiaohua',\n    age: 18\n}\n\n// ** 类型别名和接口的区别\n// 类型别名可以直接给类型，比如string，而接口必须代表对象。\n\ntype Name = string;\nconst people1: Name = 'name';\n\n\n// ** 可选值\ninterface Girl1 {\n    name: string;\n    age?: number;\n    address?: string;\n}\n\nconst girl1: Girl1 = {\n    name: 'nicai',\n    // age: 18,\n    // address: '浙江杭州'\n}\n\n// ** 任意值\n\ninterface Girl3 {\n    name: string;\n    [propName: string]: any; // 这个的意思是，属性的名字是字符串类型，属性的值可以是任何类型。\n    say(): string;\n}\n\nconst girl3: Girl3 = {\n    name: 'name',\n    sex: 1,\n    say () {\n        return \"欢迎光临 ，红浪漫洗浴！！\";\n    },\n}\n\n// ** 接口和类的约束\n\nclass girlC implements Girl3 {\n    name = '';\n    sex = '';\n    say () {\n        return this.name\n    }\n}\n\n// ** 接口间的继承\n\ninterface Teacher extends Girl {\n    teach(): string;\n}\n\n/* 接口只是在 TypeScript 里帮我们作语法校验的工具，编译成正式的js代码，就不会有任何用处了。 */\n\n/**\n * @title typescript中类的概念和使用\n */\n\n/**\n * @title typescript中类的访问类型\n */\n\n\n// ** public 默认 允许在类的内部和外部被调用\n\n// ** private 只允许在类的内部被调用，外部不允许调用\n\n// ** protected 允许在类内及继承的子类中使用\n\n/**\n * @title typescript中类的构造函数\n */\n\nclass Person111 {\n    public name: string;\n    constructor(name:string){\n        this.name = name\n    }\n}\n\nconst person111 = new Person111('www');\nconsole.log(person111.name);\n\n// 简写\nclass Person222 {\n    constructor(public name:string) {\n    }\n}\nconst person222 = new Person222('http');\nconsole.log(person222.name);\n\n\n// 类继承中的构造器写法\n\nclass PersonA {\n    constructor(public name: string) {\n        // 这里就不用再去 this.name = name;\n    }\n}\n\nclass Teacher extends PersonA {\n    constructor(name: string, public age: number) {\n        super(name);\n    }\n}\n\nconsole.log(new Teacher('罗翔', 18));\n\n/**\n * @title typescript中类的Getter、Setter和static的使用\n */\n\nclass XiaoJieJie {\n    public readonly _name :string;\n    constructor (name:string, private _age: number) {\n        this._name = name;\n    }\n    // ** get\n    get age () {\n        return this._age;\n    }\n    // ** set\n    set age (age: number) {\n        this._age = age;\n    }\n    say() {\n        return 'I am ' + this._age + 'years old'; // XiaoJieJie.prototype.say = function\n    }\n    // ** 不用 new 出对象就可以使用类里的方法\n    static sayLove() {\n        return \"I Love you\";  // XiaoJieJie.sayLove = function\n    }\n}\nconst www1 = new XiaoJieJie('www',18);\nwww1.age = 20;\n// www1._name = 'www'; // 不可以修改\nconsole.log(www1.age);\n// XiaoJieJie.sayLove();\n\n/**\n * @title 抽象类的使用\n */\n\nabstract class DaBaoJian {\n    abstract skill (): any; // 没有具体方法，这里不写括号\n}\n\nclass PrimaryWaiter extends DaBaoJian {\n    skill () {\n        console.log('初级大保健');\n    }\n}\n\nclass IntermediateWaiter extends DaBaoJian {\n    skill () {\n        console.log('中级大保健');\n    }\n}\n\nclass SeniorWaiter extends DaBaoJian {\n    skill () {\n        console.log('终极大保健');\n    }\n}\n\n/**\n * @title tsconfig.json\n */\n\n// typescript 的编译配置文件\n\n// tsc init // 初始化tsconfig文件\n\n// tsc // tsconfig编译\n\n// ** 编译选项详解\n\n// https://www.tslang.cn/docs/handbook/compiler-options.html\n\n/**\n * @title 联合类型和类型守护\n */\n\n// ** 联合类型 两个以上的参数类型\n// ** 类型守护 对参数类型进行判断\n\n/**\n * @title 枚举的使用\n */\n\nenum Status {\n    success = 200,\n    error = 201,\n    auth = 401,\n}\n\nconsole.log(Status.error);\nconsole.log(Status[200]);\n\n/**\n * @title 函数泛型\n */\n\n/**\n * @title 命名空间 NameSpace\n */\n\nnamespace Home {\n    class Header {\n        constructor() {\n            const elem = document.createElement('header');\n            elem.innerText = 'This Is Header';\n            document.body.appendChild(elem);\n        }\n    }\n\n    class Footer {\n        constructor() {\n            const elem = document.createElement('footer');\n            elem.innerText = 'This Is Footer';\n            document.body.appendChild(elem);\n        }\n    }\n\n    // 需要暴露出去的类，可以使用export关键词\n    export class Page {\n        constructor() {\n            new Header();\n            new Footer();\n        }\n    }\n    // 只有Home.Page是全局的，其他的都是模块化私有的\n    new Page();\n}\n\n"],"sourceRoot":""}